<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Test]]></title>
    <url>%2Fpost%2Ftest%2F</url>
    <content type="text"><![CDATA[this is a test \(Latex\): \[ \euro \euro \pounds\\ \int_{0}^{n} 10 dx\\ 1+1=2\\ \mathscr{F}\\ \overset{\mathbb{N}}{1+1=2} \]]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[P5021【NOIP2018D1T3】赛道修建 题解]]></title>
    <url>%2Fpost%2F%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%E3%80%90NOIP2018D1T3%E3%80%91%E8%B5%9B%E9%81%93%E4%BF%AE%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[NOIP2018D1T3赛道修建 题解 题目大意 题目链接 一棵树，给定每一条边的长度，要从其中选出\(m\)条不重复的链，使得链长的最小值最大。（如果不太习惯“链”，可以查看括号中的注释，否则请忽略大部分括号） 简要分析 通过查看题解题目要求最小值最大，我们可以想到二分答案。 设需要判定的答案为\(ans\)。 记以\(i\)为\(LCA\)的最优半链长度为\(f_{i}\)。（即在\(i\)的子树（包括\(i\)）中尽量合成链长（赛道长）不小于\(ans\)的链（赛道）后，剩余的以\(i\)为链（赛道）的一端最长的链（赛道）的长度）。 易得\(f_{i}\)从\(i\)的子节点合并得来。 贴好我冗长的主要代码（\(deal\)函数（用于更新对应节点的\(f\)值并考虑对应节点的贡献）被我去掉了，相应位置只有声明的注释，\(deal\)函数我会在下面重点讲解）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#define max_n 50000using namespace std;struct node&#123; int v,w,nxt; node()&#123;&#125; node(int _v,int _w,int _nxt):v(_v),w(_w),nxt(_nxt)&#123;&#125;&#125;;struct tree&#123; int head[max_n+1]; node edge[max_n&lt;&lt;1]; int cnt; void build()&#123; memset(head,-1,sizeof(head)),cnt=-1; &#125; void add(int u,int v,int w)&#123; edge[++cnt]=node(v,w,head[u]),head[u]=cnt; &#125;&#125;;tree tr;int que[max_n+1];//确保先遍历子节点，然后遍历父节点的遍历（类似于后序遍历）bool vis[max_n+1];//在check函数中记录i节点的值是否已知（用于在deal函数中判断是否为父节点）int f[max_n+1];//dp数组，详见分析部分int son[max_n+1];//在deal函数中记录儿子节点上传的f值int _count;//在deal函数中记录儿子节点的个数int n,m;//int deal(int num,int expected,int&amp;cnt);bool check(int ans)&#123;//二分答案的判断函数 int i,cnt=0; memset(vis,0,sizeof(vis)); for(i = 1; i &lt;= n; i ++)&#123; f[que[i]]=deal(que[i],ans,cnt),vis[que[i]]=1; if(cnt&gt;=m) return 1; &#125; return 0;&#125;int main()&#123; tr.build(); int i,j,u,v,l,r,mid,cnt; scanf("%d%d",&amp; n,&amp; m); r=0; for(i = 1; i &lt; n; i ++)&#123; scanf("%d%d%d",&amp; u,&amp; v,&amp; l); tr.add(u,v,l); tr.add(v,u,l); r+=l; &#125; //处理遍历数组（挪用vis数组记录是否访问过），也可以用dfs实现： que[n]=1,vis[1]=1; cnt=n; for(i = n; i; i --) for(j = tr.head[que[i]]; ~j; j = tr.edge[j].nxt) if(!vis[tr.edge[j].v]) vis[tr.edge[j].v]=1,que[--cnt]=tr.edge[j].v; //二分答案： l=1; r/=m; ++r; while(l&lt;r-1)&#123; mid=(l+r)&gt;&gt;1; if(check(mid)) l=mid; else r=mid; &#125; printf("%d\n",l); return 0;&#125; 状态转移 大多数题解中都是用一个\(multiset\)来记录上面代码的\(son\)数组。从小到大枚举元素，如果在\(multiset\)中有元素可以与之组成满足要求的链（赛道），则选最小（贪心思想 ，本文没有严格证明，理解请自行脑补，图片留坑）的一个组成，答案\(+1\)，并把它们从\(multiset\)中删去，最后\(f\)值取\(multiset\)中剩余的最大的值。 但是，我们现在要用一个优秀的贪心将这个问题解决，以优化时间复杂度 （尽管我的代码的时间复杂度并没有变） 贪心——全文重点 先声明一下\(deal\) 函数的参数： \(num\)：当前节点编号 \(expected\)：期望赛道长度（即要判断的答案） \(cnt\)：定义在\(check\)函数里的全局贡献，传引用进行更新 再声明一下几个主要的变量： \(l,r\)：两个指针，具体意义下面解释 \(ll,rr\)：两个用于记录的临时变量，具体含义中途可能会变化，但结合代码很好猜测和理解 \(ret\)：返回值，即最后\(f_{num}\)的值 \(cntt\)：计数器，\(son\)数组中长度不小于\(\frac{expected}{2}\)，但没有被选的数量 1int i,l,ll,r,rr,ret,cntt; 先将子节点的信息更新到\(son\)数组，若能单独成链（赛道），则答案\(+1\)： 12345678_count=0;for(i = tr.head[num]; ~i; i = tr.edge[i].nxt) if(vis[tr.edge[i].v]) if((f[tr.edge[i].v]+tr.edge[i].w)&gt;=expected) cnt++; else son[++_count]=f[tr.edge[i].v]+tr.edge[i].w;stable_sort(son+1,son+_count+1);//如果换成桶排即可提升时间复杂度 接着寻找\(r\le\frac{expected}{2}\text{，但}l\ge\frac{expected}{2}\)，用\(l\)和\(r\)组成链（赛道）得到的最大贡献（此时\(ret\)只记录大于\(\frac{expected}{2}\)的值，\(ll\)为正好大于\(\frac{expected}{2}\)的最小值） （本句设\(k&lt;r\)）因为\(r\)从大到小枚举，如果\(son_{r}\)不能匹配，\(son_{k}\)也无法匹配；但若\(son_{k}\)能匹配，\(son_{r}\)一定能匹配。综上所述，尽量用\(son_{r}\)匹配。 代码： 1234567891011121314151617ll=l=lower_bound(son+1,son+_count+1,(expected+1)&gt;&gt;1)-son;if(l&gt;_count) return son[_count];r=l-1;ret=0;cntt=0;while(r&amp;&amp;l&lt;=_count)&#123; if(son[l]+son[r]&lt;expected)&#123; ret=son[l]; l++; cntt++; continue; &#125; cnt++; l++; r--;&#125; 处理未匹配的但\(\ge \frac{expected}{2}\)的值，两两匹配： 123456if(l&lt;=_count)&#123; cntt+=(_count-l+1); if(cntt&amp;1) ret=son[_count];&#125;cnt+=cntt&gt;&gt;1; 如果\(\ge \frac{expected}{2}\)的全部匹配完了，ret只能从\(&lt;\frac{expected}{2}\)的值中计算。 因为已经计算出\(\ge \frac{expected}{2}\)的只能有\(\frac{cntt}{2}\)个不和\(&lt;\frac{expected}{2}\)的匹配，所以\(l\)尽量用大的匹配，\(r\)在可能的情况下使用小的。 代码： 123456789101112131415if(!(cntt&amp;1))&#123; r=1,l=_count; rr=ll-1; ll+=cntt&gt;&gt;1; while(l&gt;=ll)&#123; if(son[l]+son[r]&lt;expected)&#123; ret=son[r]; r++; continue; &#125; l--,r++; &#125; if(r&lt;=rr) ret=son[rr];&#125; 完整代码 如果能给出贪心的反例或者严格证明，请联系笔者。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>NOIP</tag>
        <tag>二分答案</tag>
        <tag>树上dp</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpost%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
